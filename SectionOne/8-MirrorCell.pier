! Enhancing MirrorCell

% http://squeak.preeminent.org/tut2007/html/024.html

A ==MirrorCell== is different from a ==BlankCell== because it contains a mirror that can be oriented to reflect the laser beam in different directions.  Let us start by adding a class comment. We propose something like the following.

@@dothis Click on the 'Comments' button under the class list to enter your comment.

[[[
A mirror is a cell that reflects beam based on its orientation. 
There are two main orientations: 

* For a left leaning mirror, a beam coming from the south will exit left.
* For a right leaning mirror, a beam coming from the south will exit right.
]]]



!! Capturing Mirror Orientation
We need a way to define the orientation of the mirror. The default condition will be that the mirror leans left unless otherwise specified. We will also need some methods to determine the orientation of the mirror.

@@dothis We begin by adding instance variable ==leansLeft== to the ==MirrorCell== definition. 

[[[ 
Object subclass: #MirrorCell
	instanceVariableNames: 'leansLeft'
	classVariableNames: ''
	category: 'LaserGame-Model'
]]]


@@dothis And create accessors for ==leansLeft==.

@@dothis Then add the 'initialize' protocol with the following method.

[[[
MirrorCell>>initialize
   super initialize.
   self leansLeft: true
]]]

@@dothis And add the 'testing' protocol with the following methods. 

[[[
MirrorCell>>isLeft 
	^self leansLeft

MirrorCell>>isRight
	^self isLeft not

]]]



!! Introducing a Common Ancestor

% http://squeak.preeminent.org/tut2007/html/025.html

This was all straight-forward. But what about the behavior that is similar to the Blank Cell? We'll need similar methods like ==laserEntersFrom:==, ==exitFor:== and ==isSegmentOn:==. These will require similar instance variables ==exitSides== and ==activeSegments==, but the behavior of how values are set and mapped will be different. 

We want to re-use the code as much as possible! Having nearly the same state and behavior in two different classes is a sign that we can do better. Indeed, this is a good case for a common abstract class that defines what the two cells have in common. 

@@todo SD: we should add a diagram showing the transformation


@@dothis First let's create an abstract class called ==Cell==.
[[[
Object subclass: #Cell
	instanceVariableNames: ''
	classVariableNames: ''
	category: 'LaserGame-Model'
]]]

@@dothis And a class comment.
[[[
Cell is an abstract class class that defines behaviour common to different types of cells.
]]]

Now Pharo comes with a powerful tool to refactor code (e.g. moving methods between classes, moving instance variables within a hierarchy). A refactor is a behavior preserving operation. This means that the behavior of a program should not change when the refactoring is applied. This tool is called the RefactoringEngine (and it was the first fully working refactoring engine available for any programming language [1]). The refactoring engine is available from the System Browser class list context menu under 'Refactoring'. 

@@todo BTC-2014-06-17 Should RefactoringEngine be one word?  Its only that I've not seen the term before, (neither as one word or two) and I can't find it as a class in the Pharo3 image.

!!! Inheriting from Cell

@@dothis Redefine both ==MirrorCell== and ==BlankCell== as a subclass of ==Cell==. Click on each class to view the existing definition, then modify it to match the following.

[[[
Cell subclass: #MirrorCell
	instanceVariableNames: 'leansLeft'
	classVariableNames: ''
	category: 'LaserGame-Model'
]]]
[[[
Cell subclass: #BlankCell
	instanceVariableNames: 'activeSegments exitSides'
	classVariableNames: ''
	category: 'LaserGame-Model'
]]]

@@todo BTC-2014-06-18 What about ==TargetCell==? Is it done later?

In the System Browser you should see something like Figure *InheritanceRefactored*.  Observe the indenting of ==BlankCell== and ==MirrorCell== to indicate they subclass from ==Cell==.  You can rerun the tests and they should still pass.

+Refactored common superclass.>file://figures/8-InheritanceRefactored.png|width=50|label=InheritanceRefactored+

!!! Moving instance variables up to Cell


Since both ==BlankCell== and ==MirrorCell== need to manage which segments are "on" and how a beam crosses them, we'll move the instance variables ==exitSides== and ==activeSegments== to their new common superclass. Let us start by pulling up the instance variables using the refactoring engine. 

@@dothis Bring up the context menu on ==BlankCell== and choose 'Refactoring > Inst Var Refactoring > Pull up'. Select the ==activeSegments== instance variable. 

@@todo BTC-2014-06-18 For the next step, ==activeSegments== was still listed, and selecting offers to move it from ==Cell== to ==Object==.  I find that surprising behaviour.  It it expected or a bug? Note here to investigate later and open a case. 

@@dothis Do the same for the ==exitSide== instance variables. 

You should observe that both instance variables have moved up to the superclass, and that your classes now look like this.  

[[[
Object subclass: #Cell
	instanceVariableNames: 'activeSegments exitSides'
	classVariableNames: ''
	category: 'LaserGame-Model'
]]]

[[[
Cell subclass: #BlankCell
	instanceVariableNames: ''
	classVariableNames: ''
	category: 'LaserGame-Model'
]]]

Check your tests are still passing.

What is nice with refactorings is that they eliminate a lot of possible mistakes in transforming code.  For example, a subclass of Cell could have already an instance variable with the same name and this would be problem. Note that refactorings are good also for more complex situations involving multiple classes.


!!! Moving methods up to Cell

The accessor and behavior methods need to follow the instance variables up to the new abstract class. We need to push up following methods:
- the accessors ==activeSegments==, ==activeSegments:==, ==exitSides==, ==exitSides:==,
- the testing methods ==isOff==, ==isOn== and ==isSegmentOnFor:==, 
- some common operations ==laserEntersFrom:==, ==setSegmentOffFor:==, ==setSegmentOnFor:==, and ==exitFor:==.

Select those methods, and from the selection context menu choose 'Refactoring > Push up'.
You will have moved all the methods at once to the superclass. All that is left are the three initialization methods.

Your tests should still be passing.

!!! Splitting object initialization

Considering the ==initialize== methods that need to be integrated into the new class. 

- The ==initializeActiveSegments== method works for any cell type since all cells have four segments with a default condition of false. This method clearly belongs on the superclass. 

- The ==initializeExitSides== does not because it defines part of what makes the ==BlankCell== unique from the other cells. 

@@dothis Push up ==initializeActiveSegments==to the superclass as we did before. 

@@dothis You need to manually edit the ==initialize== methods as follows.

[[[
Cell>>initialize

	super initialize.
	self initializeActiveSegments.
]]]
[[[
BlankCell>>initialize

	super initialize.
	self initializeExitSides
]]]

Confirm that the supporting methods are located as follows: 

- ==Cell>>initializeActiveSegments==

- ==BlankCell>>initializeExitSides==


Run the tests and they should pass.


!!! Alternate Design

@@todo BTC-2014-06-18 I think the following is a distraction that is not needed at this time.  Look at moving later to an "improvement" section.

For the initialization we could also define the ==initialize== method as follows:

[[[
Cell>>initialize

	super initialize.
	self initializeActiveSegments.
	self exitSides: Dictionary new.
	self initializeExitSides
]]]

And define only one method ==initializeExitSides== in ==BlankCell== and each future subclasses of ==Cell==.

[[[
BlankCell>>initializeExitSides

	self exitSides at: #north put: #south.
	self exitSides at: #south put: #north.
	self exitSides at: #east put: #west.
	self exitSides at: #west put: #east.
]]]


We could use the method ==setSegmentOffFor:==

[[[
Cell>>initializeActiveSegments

	self activeSegments: Dictionary new.
	self setSegmentOffFor: #north.
	self setSegmentOffFor: #south.
	self setSegmentOffFor: #west.
	self setSegmentOffFor: #east.
]]]



!! Tests for MirrorCell

% http://squeak.preeminent.org/tut2007/html/026.html
% http://squeak.preeminent.org/tut2007/html/027.html

% BTC-2014-06-18 Temporary comment. Removed MirrorCell definition since it has already been defined as a subclass of Cell.

When we left off coding the ==MirrorCell== we realized that there were a lot of similarities with ==BlankCell== and a few differences. Let us write a couple of basic tests for the default behavior we expect from new instances of ==MirrorCell==. We should organize these tests into a new class, that by convention we'll call ==MirrorCellTest==.  

@@dothis Add a new test class named ==MirrorCellTest== subclassed from ==TestCase==. 

[[[
TestCase subclass: #MirrorCellTest
	instanceVariableNames: ''
	classVariableNames: ''
	category: 'LaserGame-Tests'
]]]

@@dothis Start with two simple tests to check the state of a newly created instance.

[[[
MirrorCellTest>>testCellAtCreationShouldBeOff

	| cell |
	cell := MirrorCell new.
	self assert: cell isOff.
	self deny: cell isOn.
]]]


[[[
MirrorCellTest>>testSegmentAtCreationShouldBeOff

	| cell |
	cell := MirrorCell new.
	self deny: (cell isSegmentOnFor: #north).
	self deny: (cell isSegmentOnFor: #south).
	self deny: (cell isSegmentOnFor: #west).
	self deny: (cell isSegmentOnFor: #east).
]]]

Up to now all the tests should pass. 

!!! Handling Orientation 

We know we will have to set the orientation for the mirror both when the cell is first instantiated, as well as on-the-fly when the user decides to rotate the cell. Therefore we need methods to handle those requests, but first let us write two nice tests to specify the behavior we expect. Now the exit sides will depend on the orientation of the mirror, so we should have a test for each case. We should also test which segments light up for each orientation when a beam passes through the cell.  Initially the tests will be failing until later we define the application methods. We ignore any unknown methods for now.

@@dothis Define a test for each orientation of the mirror

[[[
MirrorCellTest>>testCellExitSidesForLeftMirror

	| cell |
	cell := MirrorCell new.
	cell leanLeft.
	self assert: (cell exitFor: #north) = #east.
	self assert: (cell exitFor: #south) = #west.
	self assert: (cell exitFor: #east) = #north.
	self assert: (cell exitFor: #west) = #south.
]]]


[[[
MirrorCellTest>>testCellExitSidesForRightMirror

	| cell |
	cell := MirrorCell new.
	cell leanRight.
	self assert: (cell exitFor: #north) = #west.
	self assert: (cell exitFor: #south) = #east.
	self assert: (cell exitFor: #east) = #south.
	self assert: (cell exitFor: #west) = #north.
]]]

@@dothis Now test which segments light up in each orientation.

[[[
MirrorCellTest>>testLaserEntersNorthShouldLitUpEast
	| cell |
	cell := MirrorCell new.
	cell leanLeft.
	cell laserEntersFrom: #north.
	self assert: ( cell isOn ).
	self assert: ( cell isSegmentOnFor: #north).
	self assert: ( cell isSegmentOnFor: #east).
	self deny: ( cell isSegmentOnFor: #south).
	self deny: ( cell isSegmentOnFor: #west).
]]]

[[[
MirrorCellTest>>testLaserEntersNorthShouldLitUpWest
	| cell |
	cell := MirrorCell new.
	cell leanRight.
	cell laserEntersFrom: #north.
	self assert: ( cell isOn ).
	self assert: ( cell isSegmentOnFor: #north).
	self assert: ( cell isSegmentOnFor: #west).
	self deny: ( cell isSegmentOnFor: #south).
	self deny: ( cell isSegmentOnFor: #east).
]]]

Obviously the four last test methods should fail, since we did not yet implement the application methods.  But now we are ready to do so. We need to provide the exit sides mapping for each orientation, and initialise new objects to a particular orientation. 

[[[
MirrorCell>>leanRight
	
	self leansLeft: false.
	self exitSides at: #north put: #west.
	self exitSides at: #east put: #south.
	self exitSides at: #south put: #east.
	self exitSides at: #west put: #north.
]]]

[[[
MirrorCell>>leanLeft

	self leansLeft: true.
	self exitSides at: #north put: #east.
	self exitSides at: #east put: #north.
	self exitSides at: #south put: #west.
	self exitSides at: #west put: #south.
]]]


[[[
MirrorCell>>initializeExitSides
	self exitSides: Dictionary new.
]]]

[[[
MirrorCell>>initialize
	super initialize.
	self initializeExitSides.
	self leanLeft.
]]]


Run your tests and they should pass, else fix your code and rerun your tests.
Then its a good moment to save your work.








!! Instance Creation Methods

% http://squeak.preeminent.org/tut2007/html/028.html

As a practical matter, a ==MirrorCell== must always have one orientation, left or right.  So whenever we instantiate cells from the ==MirrorCell== class we need to take the extra step of orienting the mirror. You've seen how this works in  ==MirrorCellTest>>testLaserEntersNorthShouldLitUpWest==...

[[[
cell := MirrorCell new.cell leanRight.
]]]

But it would be nice to be able to do it in one step like this...

[[[
cell := MirrorCell leanRight
]]]

...and indeed we can achieve this by defining a few new ''class'' methods. A ''class method'' is a method that is executed when we send a message to a ''class'' (e.g. ==MirrorCell leanLeft==), while an ''instance method'' is a method that is executed when we send a message to an ''instance'' of this class (e.g. ==cell leanRight==). 

Class methods are defined in the System Browser by enabling the 'Class side' checkbox under the class list, which you can see selected in Figure *InstanceCreation*. The documentation convention "class>>" is used to indicate a method defined on the class-side.

@@dothis On the class-side of ==MirrorCell==, add the protocol "instance creation" and the following two class methods. 

[[[
MirrorCell class>>leanLeft
    ^ self new leanLeft
]]]

[[[
MirrorCell class>>leanRight
    ^ self new leanRight
]]]

+Defining a class method: the ''Class side'' button is set.>file://figures/8-InstanceCreation.pdf|width=50|label=InstanceCreation+

@@note Important note! In the browser above we just created new ''class'' methods. Not ''Instance'' methods. Make sure you have the 'Class side' checkbox selected before creating the methods (and remember to switch back after too). 

You can check this works by evaluating ==MirrorCell leanRight inspect== in a Workspace.
A number of students learning from this tutorial have made the mistake of defining these methods on the wrong side, which leads to a Message Not Understood error. If this happens to you too, just delete the instance method you created by mistake, enable 'Class side' button and create a new class method instead.

You can also try it out with a new (instance-side) test method like the following:
% BTC-2014-06-18 It would be good to update a previous test.

[[[
MirrorCellTest>>testMirrorCreationWithClassAPI

	| cell |
	cell := MirrorCell leanRight.
	self assert: (cell exitFor: #north) = #west.
	self assert: (cell exitFor: #south) = #east.
	self assert: (cell exitFor: #east) = #south.
	self assert: (cell exitFor: #west) = #north.
]]]





!! About MirrorCell Design

@@todo BTC-2014-06-18 Need to review this still.  

Instead of having to test all the time state using ==isLeft== and ==isRight==, a better design is to 
define two subclasses to ==MirrorCell== one for each of the case and define specific methods in each. 
What is important to see is that each time we send a message, the correct method based on the receiver is automatically selected and executed. This mechanism acts as a systematic conditionals, therefore each time we explicitly test we do not take advantage of this build-in mechanism that the center of object-oriented programming. 




!! References

[1] J.Brant, D.Roberts and R.Johnson, "A refactoring tool for smalltalk," ''Theory and Practice of Object Systems'', vol. 3(4), 1997. http://st-www.cs.illinois.edu/users/droberts/tapos.pdf



























