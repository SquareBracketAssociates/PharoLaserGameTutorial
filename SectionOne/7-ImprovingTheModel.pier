! Improving our Model

Now that we saved our previous version with green tests, we can add new behavior to our model.
We will do this test first. 


!! Testing which segments are on
% BTC-2014-06-15 Temporary comment just for integration review.
% I think headings should be domain based as much as possible, rather than generic.

% http://squeak.preeminent.org/tut2007/html/020.html (bottom)

From our model we want to be able to determine whether a segment is on for a given direction.  New objects will initially have all segments off, so we define the following simple test:

@@dothis Define the method ==testIsSegmentOn==.

[[[
BlankCellTest>>testIsSegmentOn
	| cell |
	cell := BlankCell new.
	self deny: (cell isSegmentOnFor: #north).
]]]

The message ==isSegmentOnFor:== will tell us whether a segment for the given direction is on.  In the editor it will be highlighted to indicate that the messsage doesn't exist yet. When you save and compile, Pharo will prompt you with "Unknown selector, please confirm, correct or cancel". This is shown in Figure *UnknownSelector*.  So confirm this is expected by selecting ==isSegmentOnFor:== from the top of the list.  

+Confirm by choosing the top item from Unknown selector.>file://figures/7-UnknownSelector.png|width=50|label=UnknownSelector+

Execute the new test, then open the full debugger to get to the point shown in Figure *IsSegmentOne*. Here the title of the debugger shows you, as expected, that the message ==isSegmentOn:== is not understood by the receiver, where the receiver is the ==BlankCell== object held by the ==cell== variable. 

+Debugger opened for a message not understood.>file://figures/7-isSegmentOnOne.pdf|width=50|label=IsSegmentOne+

{{{latex: \pagebreak }}}

Click on the 'Create' (method) button in the debugger, and you will get a prompt asking in which class you want to define the method ==isSegmentOn:==. Pick ==BlankCell== as shown in Figure *IsSegmentOnTwo*, then at the protocol chooser type "testing" and press 'Enter'.


+Selecting the class to create the new method>file://figures/7-isSegmentOnTwo.pdf|width=50|label=IsSegmentOnTwo+


Now you should see the debugger has stepped into the automatically created method as shown in Figure *IsSegmentOnThree*.  The message ==shouldBeImplemented== is a placeholder to catch the case where you might be distracted completing the method definition, and will bring up the debugger again if executed. 

+Debugger stepped into the automatically created method>file://figures/7-isSegmentOnThree.pdf|width=50|label=IsSegmentOnThree+

@@dothis Again inside the debugger, we now define the method ==isSegmentOnFor:==. 

[[[
BlankCell>>isSegmentOnFor: aSymbol
	^ self activeSegments at: aSymbol
]]]



And after we save it, then press 'Proceed', the test is run. 

@@todo BTC-2014-06-15 Actually after pressing 'Proceed' the test still shows up as failed in TestRunner and we need to run the tests once more.  I'm thinking that we lead the reader to step a few times through the debugger, then close it and re-run the tests.


@@dothis Now we test all the directions by adding the following method.

[[[
BlankCellTest>>testNewCellDoesNotHaveSegmentOn
	| cell |
	cell := BlankCell new.
	self deny: (cell isSegmentOnFor: #north).
	self deny: (cell isSegmentOnFor: #south).
	self deny: (cell isSegmentOnFor: #west).
	self deny: (cell isSegmentOnFor: #east).
]]]

Execute the tests to verify that everything is working. Your three tests should be green.
It is a good occasion to save your code.


!! Handling Beam Exit Path

% http://squeak.preeminent.org/tut2007/html/021.html
% The original talks about directions, but this seems misleading. A beam going in a #north direction will exit the #north side.  Rather it seems all about sides. A beam entering the #south side will exit the #north side.

We've written methods to check the state of individual segments within our cell. Now we also need to know the output side for a given laser beam input side.  

@@dothis We first define the test that shows the goal of how we want this to work.

[[[
BlankCellTest>>testCellExit
	| cell |
	cell := BlankCell new.
	self assert: (cell exitFor:  #north) = #south.
	self assert: (cell exitFor:  #south) = #north.
	self assert: (cell exitFor:  #west) = #east.
	self assert: (cell exitFor:  #east) = #west.
]]]	

Again as before, when you compile this, confirm you know ==exitFor:== is an unknown selector. We'll hold off running this test for a moment since we know of some supporting infrastructure it requires. The ==BlankCell== class needs another instance variable to store the ==exitSides== mapping that encodes the path of a beam, and some initialization code.

@@dothis Modify the ==BlankCell== class definition like this.

[[[
Object subclass: #BlankCell
	instanceVariableNames: 'activeSegments exitSides'
	classVariableNames: ''
	category: 'LaserGame-Model'

]]]

@@dothis Create accessor methods ==exitSides== and ==exitSides:== from the class context menu Refactoring > Inst Var Refactoring > Accessors .



@@dothis Add the method  ==initializeExitSides== to define the ==exitSides== mapping, and modify ==initialize== to call it.

[[[
BlankCell>>initializeExitSides
	self exitSides: Dictionary new.
	self exitSides at: #north put: #south.
	self exitSides at: #south put: #north.
	self exitSides at: #east put: #west.
	self exitSides at: #west put: #east.
]]]

[[[
BlankCell>>initialize
	super initialize.
	self initializeActiveSegments.
	self initializeExitSides
]]]

@@dothis Finally we define the ==exitFor:== method, which given a side that the beam enters the cell, returns the side that the laser beam will exit.

[[[
BlankCell>>exitFor: aSymbol

    ^ self exitSides at: aSymbol
]]]

Run your tests and once they are green this is a good occasion to commit your work.


!! Beam Entering Side

% http://squeak.preeminent.org/tut2007/html/022.html

Another behavior we need, is to tell the cell that the laser beam has entered the cell. We will specify which side the laser beam entered using a new method ==laserEntersFrom:== (which does not exist yet). A new test should check that the expected line segments in the cell are lit-up when this method completes. 

@@dothis Add the test that shows the goal of how we want this to work.

[[[
BlankCellTest>>testLaserEntersNorthShouldLitUpSouth
	| cell |
	cell := BlankCell new.
	cell laserEntersFrom: #north.
	self assert: ( cell isOn ).
	self assert: (cell isSegmentOnFor: #north).
	self assert: (cell isSegmentOnFor: #south).
	self deny: (cell isSegmentOnFor: #west).
	self deny: (cell isSegmentOnFor: #east).
]]]


Execute the test and as expected it should fail. 

@@dothis Click 'Create' to define the ==laserEntersFrom:== method in class ==BlankCell==.

% http://squeak.preeminent.org/tut2007/html/023.html

[[[
BlankCell>>laserEntersFrom: aSymbolDirection
	| exit |	self activeSegments at: aSymbolDirection put: true. 	exit := self exitFor: aSymbolDirection.	self activeSegments at: exit put: true.
]]]


Run your tests. They should all be green. 


Now rather than ==laserEntersFrom:== directly manipulating the dictionary stored in ==exitSides==, it is better to hide that implementation by providing methods to set the state of a direction. 

@@dothis Define methods ==setOnSegmentFor:== and ==setOffSegmentFor:==, and revise ==laserEntersFrom:== to use them. 

[[[
BlankCell>>setSegmentOnFor: aSymbolDirection
    self activeSegments at: aSymbolDirection put: true

BlankCell>>setSegmentOffFor: aSymbolDirection
    self activeSegments at: aSymbolDirection put: false

BlankCell>>laserEntersFrom: aSymbolDirection
    self setSegmentOnFor: aSymbolDirection.
    self setSegmentOnFor: (self exitFor: aSymbolDirection)
]]]

Comparing the two implementations of ==laserEntersFrom:==, the second is more readable and intention revealing.  We should define a test to cover the two new methods. 

@@dothis Define ==testSetSegment==.

[[[
BlankCellTest>>testSetSegment
	| cell |
	cell := BlankCell new.
	self deny: (cell isSegmentOnFor: #north).
	cell setSegmentOnFor: #north.
	self assert: (cell isSegmentOnFor: #north).
	cell setSegmentOffFor: #north.
	self deny: (cell isSegmentOnFor: #north).
]]]

Run your tests. When they are green, save your packages. 






!! A Discussion About Directions

The design we proposed to you uses symbols to represent direction. This is okay, but there are some improvements that you could do. Carrying around symbols in all the code is prone to errors. Imagine that you mistype west as vest then your system will not work well anymore. 

We will not pursue this here, but for example one way to improve this situation is to define class-methods (==north==, ==south==, ==west==, ==east==) on the class ==Cell== and to use them in place of symbol, like so:

[[[
BlankCell class>>north
	^ #north.

BlankCell class>>south
	^ #south.

BlankCell class>>west
	^ #west

BlankCell class>>east 
	^ #east

BlankCellTest>>testIsSegmentOn 
	| cell |	cell := BlankCell new.	self deny: (cell isSegmentOnFor: BlankCell north). 
]]]

@@note Previously we have dealt with instance-methods, defined on the instance-side of a class.  The convention "Cell class>>" indicates a class-method defined on the class-side of a class.  You will see a checkbox to toggle between the two sides under the Class list in the System Browser.  Make sure you change back for the following chapters.

A good acid test is that we could replace the symbol ==\#north== in the method ==north== by a number such as 0 and the system should continue to work. 

We could also use class variables or a pool dictionary to hold such values (Read the model chapter of "Pharo by Example" to know more).  Another way to improve could be to represent direction as real objects. We let you experiment with such design. 

