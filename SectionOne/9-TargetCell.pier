! Enhancing TargetCell

% http://squeak.preeminent.org/tut2007/html/029.html

A ==TargetCell== is the last one of our cells. It is unique because it does not have exit. Once the laser beam enters a target cell it does not leave and propagate anymore. A design choice we made here is to set the exit values to be nil. But let us start by writing some tests to clarify what we mean.


!! Adding a class comment

Let us start by adding a class comment - something like the following...

[[[
A target cell is a cell does not let the beam leave once entered. Once a target is reached the game is finished. 
]]]

@@todo BTC-2014-06-21 Cosmetic - that class comment should not indent the second line.

!! Adding Some Tests

% http://squeak.preeminent.org/tut2007/html/030.html

Let us continue our good practices and add some tests.

@@dothis We add a new test class named ==TargetCellTest==

[[[
TestCase subclass: #TargetCellTest
	instanceVariableNames: ''
	classVariableNames: ''
	category: 'LaserGame-Tests'
]]]

@@dothis At creation time the cell should be off, and all its segments should be off too. 

[[[
TargetCellTest>>testCellStateShouldBeOff
	| cell |
	cell := TargetCell new.
	self assert: cell isOff.
	self deny: cell isOn
]]]

[[[
TargetCellTest>>testSegmentAtCreationShouldBeOff

	| cell |
	cell := TargetCell new.
	self deny: (cell isSegmentOnFor: #north).
	self deny: (cell isSegmentOnFor: #south).
	self deny: (cell isSegmentOnFor: #west).
	self deny: (cell isSegmentOnFor: #east).
]]]


@@dothis When the laser beam enters, only one segment should light-up.


[[[
TargetCellTest>>testLaserEntersNorthShouldNotLitUpSouth

	| cell |
	cell := TargetCell new.
	cell laserEntersFrom: #north.
	self assert: ( cell isOn ).
	self assert: (cell isSegmentOnFor: #north).
	self deny: (cell isSegmentOnFor: #south).
	self deny: (cell isSegmentOnFor: #west).
	self deny: (cell isSegmentOnFor: #east).
]]]



@@dothis Now we express that all the exit sides of a target will be nil. 

[[[
TargetCellTest>>testCellExitsAreNil

	| cell |
	cell := TargetCell new.
	#(north #east #south #west)
		do: [ :inputSide | self assert: (cell exitFor: inputSide) isNil ]
]]]

!! Defining the corresponding behavior
Now we are ready to define all the application behavior we wrote tests for. 

!!! TargetCell is a Cell

The first thing we will do is to make ==TargetCell== inherit from ==Cell==.

@@dothis Edit the existing ==TargetCell== class definition to match the following.

[[[ 
Cell subclass: #TargetCell
	instanceVariableNames: ''
	classVariableNames: ''
	category: 'LaserGame-Model'
]]]


+TargetCell should also inherit from Cell.>file://figures/9-TargetCellInheritance.pdf|width=60|label=TargetCellInheritance+

You should get a class hierarchy like that shown by Figure *TargetCellInheritance*. 

Run the tests. Two of the four tests which are not related to exit faces should already pass.

@@todo BTC-2014-06-21 TargetCell already had a comment defined, so the icon in that figure should be different.  (A bitmap edit will do).




!!! Handling Exits

Now we should handle the exit sides. 

@@dothis We define the ==initializeExitSides== and ==initialize== as follows: 


[[[
TargetCell>>initializeExitSides

	self exitSides: Dictionary new.
	self exitSides at: #north put: nil.
	self exitSides at: #east put: nil.
	self exitSides at: #south put: nil.
	self exitSides at: #west put: nil.
	
]]]


[[[
TargetCell>>initialize

	super initialize.
	self initializeExitSides
]]]

Run the tests and they should all be green. You should count 17 tests were run and passed.  If you count less than 17, check you have all three unit test classes selected in the Test Runner.  

This is a good occasion to save your code. 



!! About Design Points

!!! About our initialize methods

It looks like we defined our initialization methods several times, for each cell type, and some parts are exactly the same. This is clearly a sign that we can do better. Colloquially, this duplication is a form of 'code smell' (with the idea that bad code smells like rotten perfume). Can you propose a solution to this problem without reading ours?

Our solution is the following: First we notice that calling ==leanLeft== from ==MirrorCell>>initialize== effectively initializes the exit sides, so its appropriate to move it there as follows:

[[[
MirrorCell>>initialize
	super initialize.
	self initializeExitSides.
]]]

[[[
MirrorCell>>initializeExitSides
	self exitSides: Dictionary new.
	self leanLeft.
]]]

Next we consider that calling ==initializeExitSides== is common to the ==initialize== method of the three cell classes.  So we push that up to the superclass ==initialize== method. The outcome would be as follows.


[[[
Cell>>initialize

	super initialize.
	self initializeActiveSegments.
	self initializeExitSides.
]]]

[[[
BlankCell>>initialize
	super initialize.
]]]

[[[
TargetCell>>initialize
	super initialize.
]]]

[[[
MirrorCell>>initialize
	super initialize.
]]]

Now actually, an ==intialize== method that only calls its superclass ==initialize== method is redundant, so we can eliminate them.

@@dothis Modify ==Cell>>initialize== as above and remove the other three ==initialize== methods.

Check your tests.

Then we consider the line ==self exitSides: Dictionary new== that is common to the three cell classes, so we push that up to the superclass ==initialize== method.

@@dothis Make the following modifications. 

[[[
Cell>>initialize

	super initialize.
	self initializeActiveSegments.
	self exitSides: Dictionary new.
	self initializeExitSides.
]]]

[[[
BlankCell>>initializeExitSides

	self exitSides at: #north put: #south.
	self exitSides at: #south put: #north.
	self exitSides at: #east put: #west.
	self exitSides at: #west put: #east
]]]

[[[
TargetCell>>initializeExitSides

	self exitSides at: #north put: nil.
	self exitSides at: #east put: nil.
	self exitSides at: #south put: nil.
	self exitSides at: #west put: nil.
]]]

[[[
MirrorCell>>initializeExitSides

	self leanLeft.
]]]

Now we can run again our tests, and then safely save a new version of our packages.



!!! About TargetCell Design

Using ==nil== to encode that there is no value for ==exitSides== is not optimal,  because it forces the client code to always check whether it gets true, false or nil. A good object-oriented design principle i to have an object accepting the same messages but doing nothing. This is called the ==NullObject== design pattern. What is nice is that it eliminates all the ==ifNil:== tests and follows the "tell don't ask" way of really thinking in an object-oriented manner. 

For now we will continue with ==nil==, but keep it in mind for a future refactoring exercise. 




























